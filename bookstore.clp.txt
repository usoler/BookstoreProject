; Sat Nov 23 18:58:10 CET 2019
; 
;+ (version "3.5")
;+ (build "Build 663")

;;--------------------------------------------------------------------------------------------------------------------------
;; Ontologia
;;--------------------------------------------------------------------------------------------------------------------------
(defclass %3ACLIPS_TOP_LEVEL_SLOT_CLASS "Fake class to save top-level slot information"
	(is-a USER)
	(role abstract)
	(multislot Ha_escrito
;+		(comment "Relacion de los libros que ha escrito.")
		(type INSTANCE)
;+		(allowed-classes Libro)
		(create-accessor read-write))
	(single-slot KB_191360_Class8
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot Escrito_por
;+		(comment "Relacion con el autor que ha escrito el libro.")
		(type INSTANCE)
;+		(allowed-classes Autor)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot KB_191360_Class7
		(type STRING)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot Nacionalidad
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot Escribe_genero
;+		(comment "Relacion de los generos que ha escrito.")
		(type INSTANCE)
;+		(allowed-classes Genero)
		(create-accessor read-write))
	(single-slot Dificultad
		(type SYMBOL)
		(allowed-values Facil Dificil)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot Libros_genero
;+		(comment "Relacion de los libros que forman este genero.")
		(type INSTANCE)
;+		(allowed-classes Libro)
		(create-accessor read-write))
	(multislot Es_genero
;+		(comment "Relacion con el genero que es.")
		(type INSTANCE)
;+		(allowed-classes Genero)
		(create-accessor read-write))
	(single-slot NombreGenero
		(type STRING)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot Bestseller
		(type SYMBOL)
		(allowed-values FALSE TRUE)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot Anyo
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot Titulo
		(type STRING)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot Valoracion
		(type SYMBOL)
		(allowed-values Buena Mala)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot Autores_genero
;+		(comment "Relacion de los autores que escriben libros de este genero.")
		(type INSTANCE)
;+		(allowed-classes Autor)
		(create-accessor read-write))
	(single-slot NombreAutor
		(type STRING)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot Longitud
		(type SYMBOL)
		(allowed-values Corto Largo)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass Autor
	(is-a USER)
	(role concrete)
	(multislot Escribe_genero
;+		(comment "Relacion de los generos que ha escrito.")
		(type INSTANCE)
;+		(allowed-classes Genero)
		(create-accessor read-write))
	(single-slot Nacionalidad
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot NombreAutor
		(type STRING)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot Ha_escrito
;+		(comment "Relacion de los libros que ha escrito.")
		(type INSTANCE)
;+		(allowed-classes Libro)
		(create-accessor read-write)))

(defclass Genero
	(is-a USER)
	(role concrete)
	(multislot Autores_genero
;+		(comment "Relacion de los autores que escriben libros de este genero.")
		(type INSTANCE)
;+		(allowed-classes Autor)
		(create-accessor read-write))
	(single-slot NombreGenero
		(type STRING)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot Libros_genero
;+		(comment "Relacion de los libros que forman este genero.")
		(type INSTANCE)
;+		(allowed-classes Libro)
		(create-accessor read-write)))

(defclass Libro
	(is-a USER)
	(role concrete)
	(single-slot Anyo
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot Dificultad
		(type SYMBOL)
		(allowed-values Facil Dificil)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot Es_genero
;+		(comment "Relacion con el genero que es.")
		(type INSTANCE)
;+		(allowed-classes Genero)
		(create-accessor read-write))
	(single-slot Bestseller
		(type SYMBOL)
		(allowed-values FALSE TRUE)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot Titulo
		(type STRING)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot Valoracion
		(type SYMBOL)
		(allowed-values Buena Mala)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot Escrito_por
;+		(comment "Relacion con el autor que ha escrito el libro.")
		(type INSTANCE)
;+		(allowed-classes Autor)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot Longitud
		(type SYMBOL)
		(allowed-values Corto Largo)
;+		(cardinality 0 1)
		(create-accessor read-write)))
		
		
;;--------------------------------------------------------------------------------------------------------------------------
;; Instancias
;;--------------------------------------------------------------------------------------------------------------------------
(definstances instancias
; Sat Nov 23 18:58:10 CET 2019
; 
;+ (version "3.5")
;+ (build "Build 663")

([KB_191360_Class20] of  Genero

	(NombreGenero "Horror"))

([KB_191360_Class21] of  Genero

	(NombreGenero "Western"))

([KB_191360_Class22] of  Genero

	(NombreGenero "Historical"))

([KB_191360_Class23] of  Genero

	(NombreGenero "Thriller"))

([KB_191360_Class24] of  Genero

	(NombreGenero "War"))

([KB_191360_Class25] of  Autor

	(Escribe_genero
		[KB_191360_Class23]
		[KB_191360_Class20])
	(Nacionalidad "Estadounidense")
	(NombreAutor "Stephen King"))

([KB_191360_Class26] of  Autor

	(Escribe_genero [KB_191360_Class20])
	(Nacionalidad "Britanica")
	(NombreAutor "Mary Shelley"))

([KB_191360_Class28] of  Autor

	(Escribe_genero
		[KB_191360_Class20]
		[KB_191360_Class23])
	(Nacionalidad "Estadounidense")
	(NombreAutor "Thomas Harris"))

([KB_191360_Class29] of  Autor

	(Escribe_genero [KB_191360_Class21])
	(Nacionalidad "Estadounidense")
	(NombreAutor "N Scott Momaday"))

([KB_191360_Class32] of  Autor

	(Escribe_genero [KB_191360_Class21])
	(Nacionalidad "Estadounidense")
	(NombreAutor "Larry McMurtry"))

([KB_191360_Class33] of  Autor

	(Escribe_genero [KB_191360_Class22])
	(Nacionalidad "Britanica")
	(NombreAutor "Bernard Cornwell"))

([KB_191360_Class34] of  Autor

	(Escribe_genero [KB_191360_Class22])
	(Nacionalidad "Estadounidense")
	(NombreAutor "Kristin Hannah"))

([KB_191360_Class36] of  Autor

	(Escribe_genero
		[KB_191360_Class23]
		[KB_191360_Class22])
	(Nacionalidad "Estadounidense")
	(NombreAutor "Leonard Goldberg"))

([KB_191360_Class37] of  Autor

	(Escribe_genero [KB_191360_Class23])
	(Nacionalidad "Estadounidense")
	(NombreAutor "Ruth Ware"))

([KB_191360_Class38] of  Autor

	(Escribe_genero [KB_191360_Class23])
	(Nacionalidad "Estadounidense")
	(NombreAutor "Josh Grisham"))

([KB_191360_Class39] of  Libro

	(Anyo 2019)
	(Bestseller TRUE)
	(Dificultad Dificil)
	(Es_genero [KB_191360_Class20])
	(Escrito_por [KB_191360_Class25])
	(Longitud Largo)
	(Titulo "The Institute")
	(Valoracion Buena))

([KB_191360_Class40] of  Libro

	(Anyo 2015)
	(Dificultad Facil)
	(Es_genero [KB_191360_Class20])
	(Escrito_por [KB_191360_Class26])
	(Longitud Corto)
	(Titulo "Frankenstein")
	(Valoracion Buena))

([KB_191360_Class41] of  Libro

	(Anyo 1991)
	(Dificultad Dificil)
	(Es_genero [KB_191360_Class20])
	(Escrito_por [KB_191360_Class28])
	(Longitud Corto)
	(Titulo "The Silence of the Lambs")
	(Valoracion Buena))

([KB_191360_Class42] of  Libro

	(Anyo 2010)
	(Dificultad Dificil)
	(Es_genero [KB_191360_Class21])
	(Escrito_por [KB_191360_Class29])
	(Longitud Corto)
	(Titulo "House Made of Dawn")
	(Valoracion Buena))

([KB_191360_Class43] of  Libro

	(Anyo 2010)
	(Dificultad Dificil)
	(Es_genero [KB_191360_Class21])
	(Escrito_por [KB_191360_Class32])
	(Longitud Largo)
	(Titulo "Lonesome Dove")
	(Valoracion Buena))

([KB_191360_Class44] of  Libro

	(Anyo 2019)
	(Bestseller TRUE)
	(Dificultad Facil)
	(Es_genero
		[KB_191360_Class24]
		[KB_191360_Class22])
	(Escrito_por [KB_191360_Class33])
	(Longitud Corto)
	(Titulo "Sword of Kings: A Novel")
	(Valoracion Buena))

([KB_191360_Class45] of  Libro

	(Anyo 2008)
	(Dificultad Facil)
	(Es_genero
		[KB_191360_Class24]
		[KB_191360_Class22])
	(Escrito_por [KB_191360_Class33])
	(Longitud Corto)
	(Titulo "Lords of the North")
	(Valoracion Buena))

([KB_191360_Class46] of  Libro

	(Anyo 2017)
	(Dificultad Facil)
	(Es_genero [KB_191360_Class22])
	(Escrito_por [KB_191360_Class34])
	(Longitud Largo)
	(Titulo "The Nightingale")
	(Valoracion Buena))

([KB_191360_Class47] of  Libro

	(Anyo 2018)
	(Dificultad Dificil)
	(Es_genero [KB_191360_Class22])
	(Escrito_por [KB_191360_Class36])
	(Longitud Corto)
	(Titulo "The Daughter of Sherlock Holmes: A Mystery")
	(Valoracion Buena))

([KB_191360_Class48] of  Libro

	(Anyo 2001)
	(Dificultad Dificil)
	(Es_genero [KB_191360_Class23])
	(Escrito_por [KB_191360_Class36])
	(Longitud Largo)
	(Titulo "Fatal Care")
	(Valoracion Mala))

([KB_191360_Class49] of  Libro

	(Anyo 2019)
	(Dificultad Facil)
	(Es_genero [KB_191360_Class23])
	(Escrito_por [KB_191360_Class37])
	(Longitud Corto)
	(Titulo "The Turn of the Key")
	(Valoracion Buena))

([KB_191360_Class50] of  Libro

	(Anyo 2019)
	(Bestseller TRUE)
	(Dificultad Dificil)
	(Es_genero [KB_191360_Class23])
	(Escrito_por [KB_191360_Class38])
	(Longitud Corto)
	(Titulo "The Guardians")
	(Valoracion Buena)))



;;--------------------------------------------------------------------------------------------------------------------------
;; NUEVAS CLASES
;;--------------------------------------------------------------------------------------------------------------------------
(defclass Recomendacion
	(is-a USER)
	(role concrete)
	(slot nombre_libro_recomendado (type INSTANCE) (create-accessor read-write))
	(slot puntuacion (type INTEGER) (create-accessor read-write))
	(slot bestseller (type SYMBOL) (allowed-values FALSE TRUE) (create-accessor read-write))
	(multislot justificaciones (type STRING) (create-accessor read-write)))

(defclass ListaLibrosRecomendados
	(is-a USER)
	(role concrete)
	(multislot libros_recomendados (type INSTANCE) (create-accessor read-write)))



;;--------------------------------------------------------------------------------------------------------------------------
;; MODULOS
;;--------------------------------------------------------------------------------------------------------------------------
(defmodule MAIN (export ?ALL))

(defmodule recopilacion-datos-lector
	(import MAIN ?ALL)
	(export ?ALL))
	
(defmodule recopilacion-datos-preferencias
	(import MAIN ?ALL)
	(import recopilacion-datos-lector ?ALL)
	(export ?ALL))
	
(defmodule procesado-datos
	(import MAIN ?ALL)
	(import recopilacion-datos-lector deftemplate ?ALL)
	(import recopilacion-datos-preferencias deftemplate ?ALL)
	(export ?ALL))
	
(defmodule generacion-soluciones
	(import MAIN ?ALL)
	(export ?ALL))
	
(defmodule presentar-resultados
	(import MAIN ?ALL)
	(export ?ALL))
	

;;--------------------------------------------------------------------------------------------------------------------------
;; TEMPLATES
;;--------------------------------------------------------------------------------------------------------------------------
(deftemplate MAIN::datos_perfil_lector
	(slot edad (type INTEGER) (default -1)) ;edad del lector
	(slot horas_dedicadas (type INTEGER) (default -1)) ;horas dedicadas a leer a la semana
	(slot momento (type SYMBOL) (allowed-symbols Manyana Tarde Noche Indiferente nulo) (default nulo)) ;momento del dia en que lee
	(slot frecuencia (type SYMBOL) (allowed-symbols Diariamente Habitualmente Esporadicamente Nunca nulo) (default nulo)) ;frecuencia con la que lee
	(slot lugar (type SYMBOL) (allowed-symbols Casa Biblioteca AireLibre TransportePublico Indiferente nulo) (default nulo)) ; lugar donde suele leer
	(slot bestseller (type SYMBOL) (allowed-symbols Si No nulo) (default nulo)) ;le gustan los libros populares
	(slot valoracion (type SYMBOL) (allowed-symbols Si No nulo) (default nulo)) ;se deja llevar por las valoraciones del libro
	(slot moda (type SYMBOL) (allowed-symbols Si No nulo) (default nulo)) ;se deja llevar por las modas
	(slot autor_extranjero (type SYMBOL) (allowed-symbols Si No Indiferente nulo) (default nulo))
	(slot nacionalidad (type STRING) (default "nulo")) ;nacionalidad del lector
)
	
(deftemplate MAIN::datos_preferencias_lector
	(multislot generos_preferidos (type INSTANCE))
	(multislot autores_preferidos (type INSTANCE)))

(deftemplate MAIN::lista_recomendaciones_desordenada
	(multislot recomendaciones (type INSTANCE)))
	
(deftemplate MAIN::lista_recomendaciones_ordenada_por_bestseller
	(multislot recomendaciones (type INSTANCE)))
	
(deftemplate MAIN::lista_recomendaciones_ordenada_por_puntuacion
	(multislot recomendaciones (type INSTANCE)))


;;--------------------------------------------------------------------------------------------------------------------------
;; FUNCTIONS
;;--------------------------------------------------------------------------------------------------------------------------
(deffunction MAIN::pregunta-libre-alfabetica (?pregunta)
	(format t "%s: (Ejemplo: Espanyola, Britanica, Estadounidense...): " ?pregunta)
	(bind ?respuesta (read))
	?respuesta)

(deffunction MAIN::pregunta-libre-numerica (?pregunta ?rango-inicial ?rango-final)
	(format t "%s (Valor desde %d hasta %d): " ?pregunta ?rango-inicial ?rango-final)
	(bind ?respuesta (read))
	(while (not (and (>= ?respuesta ?rango-inicial) (<= ?respuesta ?rango-final))) do
		(format t "%s (Valor desde %d hasta %d: )" ?pregunta ?rango-inicial ?rango-final)
		(bind ?respuesta (read)))
	?respuesta)
	
(deffunction MAIN::pregunta-respuesta-unica (?pregunta $?posibles-valores)
	(bind ?linea (format nil "%s" ?pregunta))
	(printout t ?linea crlf)
	(progn$ (?valor ?posibles-valores)
		(bind ?linea (format nil " %d. %s" ?valor-index ?valor))
		(printout t ?linea crlf))
	(bind ?respuesta (pregunta-libre-numerica "Escoge una opcion:" 1 (length$ ?posibles-valores)))
	?respuesta)

(deffunction MAIN::pregunta-multirespuesta (?pregunta $?posibles-valores)
	(bind ?linea (format nil "%s" ?pregunta))
	(printout t ?linea crlf)
	(progn$ (?valor ?posibles-valores)
		(bind ?linea (format nil " %d. %s" ?valor-index ?valor))
		(printout t ?linea crlf))
	(format t "%s" "Indica los numeros referentes a las preferencias separados por un espacio: ")
	(bind ?respuesta (readline))
	(bind ?numeros (str-explode ?respuesta))
	(bind $?lista (create$))
	(progn$ (?valor ?numeros)
		(if (and (integerp ?valor) (and (>= ?valor 0) (<= ?valor (length$ ?posibles-valores))))
			then (if (not (member$ ?valor ?lista))
				then (bind ?lista (insert$ ?lista (+ (length$ ?lista) 1) ?valor)))
		))
	(if (or (member$ 0 ?lista) (= (length$ ?lista) 0))
		then (bind ?lista (create$ 0)))
	?lista)
	
(deffunction maxima-puntuacion ($?lista)
	(bind ?maximo -1)
	(bind ?elemento nil)
	(progn$ (?curr-rec $?lista)
		(bind ?curr-cont (send ?curr-rec get-nombre_libro_recomendado))
		(bind ?curr-punt (send ?curr-rec get-puntuacion))
		(if (> ?curr-punt ?maximo)
			then (bind ?maximo ?curr-punt) (bind ?elemento ?curr-rec)))
	?elemento)

(deffunction ordenacion-bestseller ($?lista)
	(bind ?elemento (nth$ 1 $?lista))
	(progn$ (?curr-rec $?lista)
		(bind ?curr-best (send ?curr-rec get-bestseller))
		(if (eq ?curr-best TRUE)
			then (bind ?elemento ?curr-rec)))
	?elemento)



;;--------------------------------------------------------------------------------------------------------------------------
;; MENSAJES
;;--------------------------------------------------------------------------------------------------------------------------
(defmessage-handler MAIN::Libro mostrar-libro ()
	(format t "Titulo: %s %n" ?self:Titulo)
	(printout t crlf)
	(format t "Anyo: %d" ?self:Anyo)
	(printout t crlf)
	(format t "Longitud: %s" ?self:Longitud)
	(printout t crlf)
	(format t "Escrito por: %s" (send ?self:Escrito_por get-NombreAutor))
	(printout t crlf)
	(bind ?i 1)
	(progn$ (?curr-gen ?self:Es_genero)
		(format t "Genero %d: %s" ?i (send ?curr-gen get-NombreGenero))
		(printout t crlf)
		(bind ?i (+ ?i 1))
	)
)

(defmessage-handler MAIN::Recomendacion mostrar-recomendacion ()
	(printout t "---------------------" crlf)
	(printout t (send ?self:nombre_libro_recomendado mostrar-libro))
	(printout t crlf)
	(format t "Nivel de recomendacion: %d %n" ?self:puntuacion)
	(printout t "Justificacion de la eleccion: " crlf)
	(progn$ (?curr-just ?self:justificaciones)
		(printout t ?curr-just crlf))
	(printout t crlf)
	(printout t "---------------------" crlf))


;;--------------------------------------------------------------------------------------------------------------------------
;; INICIO
;;--------------------------------------------------------------------------------------------------------------------------
(defrule MAIN::init "Regla inicial"
	(declare(salience 10))
	=>
	(printout t"-------------------------------------------" crlf)
	(printout t"     Bookstore Project     " crlf)
	(printout t"-------------------------------------------" crlf)
	(printout t crlf)
	(printout t"Bienvenido! Primero debe responder algunas preguntas:")
	(printout t crlf)
	(focus recopilacion-datos-lector))
	
	

;;--------------------------------------------------------------------------------------------------------------------------
;; RECOPILACION DATOS LECTOR
;;--------------------------------------------------------------------------------------------------------------------------	
(defrule recopilacion-datos-lector::create-hecho-perfil-lector "Crea un hecho con valores por defecto"
	(not (datos_perfil_lector))
	=>
	(assert (datos_perfil_lector)))

(defrule recopilacion-datos-lector::init-edad "Inicializa la edad del lector"
	?a <- (datos_perfil_lector (edad ?edad))
	(test (< ?edad 0))
	=>
	(bind ?edad (pregunta-libre-numerica "Que edad tiene?" 1 100))
	(modify ?a (edad ?edad)))
	
(defrule recopilacion-datos-lector::init-horas-dedicadas "Inicializa las horas dedicadas a leer del lector"
	?h <- (datos_perfil_lector (horas_dedicadas ?horas))
	(test (< ?horas 0))
	=>
	(bind ?horas (pregunta-libre-numerica "Cuantas horas le dedica a leer a la semana?" 0 168))
	(modify ?h (horas_dedicadas ?horas)))

(defrule recopilacion-datos-lector::init-momento "Inicializa el momento del dia en que suele leer el lector"
	?m <- (datos_perfil_lector (momento ?momento))
	(test (eq ?momento nulo))
	=>
	(bind ?momento (pregunta-respuesta-unica "En que momento del dia suele leer?" Manyana Tarde Noche Indiferente))
	(modify ?m (momento ?momento)))
	
(defrule recopilacion-datos-lector::init-frecuencia "Inicializa la frecuencia con que lee el lector"
	?f <- (datos_perfil_lector (frecuencia ?frec))
	(test (eq ?frec nulo))
	=>
	(bind ?frec (pregunta-respuesta-unica "Con que frecuencia lee?" Diariamente Habitualmente Esporadicamente Nunca))
	(modify ?f (frecuencia ?frec)))
	
(defrule recopilacion-datos-lector::init-lugar "Inicializa el lugar donde suele leer el lector"
	?l <- (datos_perfil_lector (lugar ?lugar))
	(test (eq ?lugar nulo))
	=>
	(bind ?lugar (pregunta-respuesta-unica "En que lugar suele leer?" Casa Biblioteca AireLibre TransportePublico Indiferente))
	(modify ?l (lugar ?lugar)))
	
(defrule recopilacion-datos-lector::init-bestseller "Inicializa si le gustan los libros populares al lector"
	?b <- (datos_perfil_lector (bestseller ?best))
	(test (eq ?best nulo))
	=>
	(bind ?best (pregunta-respuesta-unica "Le gustan los libros populares (bestseller)?" Si No Indiferente))
	(modify ?b (bestseller ?best)))
	
(defrule recopilacion-datos-lector::init-valoracion "Inicializa si se deja llevar por las valoraciones el lector"
	?v <- (datos_perfil_lector (valoracion ?val))
	(test (eq ?val nulo))
	=>
	(bind ?val (pregunta-respuesta-unica "A la hora de escoger un libro se deja llevar por las valoraciones?" Si No))
	(modify ?v (valoracion ?val)))
	
(defrule recopilacion-datos-lector::init-moda "Inicializa si se deja llevar por las modas el lector"
	?m <- (datos_perfil_lector (moda ?moda))
	(test (eq ?moda nulo))
	=>
	(bind ?moda (pregunta-respuesta-unica "A la hora de escoger un libro se deja llevar por las modas?" Si No))
	(modify ?m (moda ?moda)))
	
(defrule recopilacion-datos-lector::init-autor-extranjero "Inicializa si prefiere autores extranjeros el lector"
	?a <- (datos_perfil_lector (autor_extranjero ?autor))
	(test (eq ?autor nulo))
	=>
	(bind ?autor (pregunta-respuesta-unica "Prefiere autores extranjeros?" Si No Indiferente))
	(modify ?a (autor_extranjero ?autor)))
	
(defrule recopilacion-datos-lector::init-nacionalidad "Inicializa la nacionalidad del lector"
	?n <- (datos_perfil_lector (nacionalidad ?nac))
	(test (eq ?nac "nulo"))
	=>
	(bind ?nac (pregunta-libre-alfabetica "De que nacionalidad eres?"))
	(modify ?n (nacionalidad ?nac)))

(defrule recopilacion-datos-lector::cambiar-recopilacion-preferencias "Cambia el foco al modulo de recopilacion de preferencias"
	(declare (salience 10))
	?jump <- (datos_perfil_lector (edad ?edad) (horas_dedicadas ?horas) (momento ?momento) (frecuencia ?frec) (lugar ?lugar) (bestseller ?best) (valoracion ?val) (moda ?moda) (autor_extranjero ?autor) (nacionalidad ?nac))
	(test (> ?edad 0))
	(test (> ?horas -1))
	(test (neq ?momento nulo))
	(test (neq ?frec nulo))
	(test (neq ?lugar nulo))
	(test (neq ?best nulo))
	(test (neq ?val nulo))
	(test (neq ?moda nulo))
	(test (neq ?autor nulo))
	(test (neq ?nac "nulo"))
	=>
	(focus recopilacion-datos-preferencias))



;;--------------------------------------------------------------------------------------------------------------------------
;; RECOPILACION DATOS PREFERENCIAS
;;--------------------------------------------------------------------------------------------------------------------------
(deffacts recopilacion-datos-preferencias::init-hechos "Inicializa hechos para poder recopilar datos"
	(generos_pref ask)
	(autores_pref ask)
	(datos_preferencias_lector ))

(defrule recopilacion-datos-preferencias::init-generos-preferidos "Inicializa los generos preferidos del lector"
	?hecho <- (generos_pref ask)
	?pref <- (datos_preferencias_lector)
	=>
	(bind $?obj-generos (find-all-instances ((?inst Genero)) TRUE))
	(bind $?nombre-generos (create$ ))
	(loop-for-count (?i 1 (length$ $?obj-generos)) do
		(bind ?curr-obj (nth$ ?i ?obj-generos))
		(bind ?curr-nom (send ?curr-obj get-NombreGenero))
		(bind $?nombre-generos (insert$ $?nombre-generos (+ (length$ $?nombre-generos) 1) ?curr-nom)))
	(bind ?escogido (pregunta-multirespuesta "Escoja sus generos preferidos (o 0 en el caso contrario): " $?nombre-generos))
	(assert (generos_pref TRUE))
	(bind $?respuesta (create$ ))
	(loop-for-count (?i 1 (length$ ?escogido)) do
		(bind ?curr-index (nth$ ?i ?escogido))
		(if (= ?curr-index 0)
			then (assert (generos_pref FALSE)))
		(bind ?curr-genero (nth$ ?curr-index ?obj-generos))
		(bind $?respuesta (insert$ $?respuesta (+ (length$ $?respuesta) 1) ?curr-genero))
	)
	(retract ?hecho)
	(modify ?pref (generos_preferidos $?respuesta)))

(defrule recopilacion-datos-preferencias::init-autores-preferidos "Inicializa los autores preferidos del lector"
	?hecho <- (autores_pref ask)
	?pref <- (datos_preferencias_lector)
	=>
	(bind $?obj-autores (find-all-instances ((?inst Autor)) TRUE))
	(bind $?nombre-autores (create$ ))
	(loop-for-count (?i 1 (length$ $?obj-autores)) do
		(bind ?curr-obj (nth$ ?i ?obj-autores))
		(bind ?curr-nom (send ?curr-obj get-NombreAutor))
		(bind $?nombre-autores (insert$ $?nombre-autores (+ (length$ $?nombre-autores) 1) ?curr-nom)))
	(bind ?escogido (pregunta-multirespuesta "Escoja sus autores preferidos (o 0 en el caso contrario): " $?nombre-autores))
	(assert (autores_pref TRUE))
	(bind $?respuesta (create$ ))
	(loop-for-count (?i 1 (length$ ?escogido)) do
		(bind ?curr-index (nth$ ?i ?escogido))
		(if (= ?curr-index 0)
			then (assert (autores_pref FALSE)))
		(bind ?curr-autor (nth$ ?curr-index ?obj-autores))
		(bind $?respuesta (insert$ $?respuesta (+ (length$ $?respuesta) 1) ?curr-autor))
	)
	(retract ?hecho)
	(modify ?pref (autores_preferidos $?respuesta)))

(defrule recopilacion-datos-preferencias::cambiar-procesado-datos "Cambia al modulo de procesado de datos"
	(declare (salience -1))
	?generos <- (generos_pref TRUE|FALSE)
	?autores <- (autores_pref TRUE|FALSE)
	=>
	(focus procesado-datos))



;;--------------------------------------------------------------------------------------------------------------------------
;; PROCESADO DATOS
;;--------------------------------------------------------------------------------------------------------------------------
(defrule procesado-datos::init-libros-recomendados "Inicializa los libros recomendados con todos los libros"
	(declare (salience 10))
	=>
	(bind $?lista (find-all-instances ((?inst Libro)) TRUE))
	(progn$ (?curr-con ?lista)
		(make-instance (gensym) of Recomendacion (nombre_libro_recomendado ?curr-con) (puntuacion 0) (bestseller (send ?curr-con get-Bestseller))))
	(printout t "..." crlf))
	
(defrule procesado-datos::init-hechos-generos "Inicializa hechos de generos para poder procesarlos"
	(datos_preferencias_lector (generos_preferidos $?gen))
	?hecho <- (generos_pref ?aux)
	(test (or (eq ?aux TRUE) (eq ?aux FALSE)))
	=>
	(retract ?hecho)
	(if (eq ?aux TRUE)
		then (progn$ (?curr-gen $?gen)
			(assert (generos ?curr-gen))))
	(printout t "..." crlf))

(defrule procesado-datos::init-hechos-autores "Inicializa hechos de autores para poder procesarlos"
	(datos_preferencias_lector (autores_preferidos $?gen))
	?hecho <- (autores_pref ?aux)
	(test (or (eq ?aux TRUE) (eq ?aux FALSE)))
	=>
	(retract ?hecho)
	(if (eq ?aux TRUE)
		then (progn$ (?curr-gen $?gen)
			(assert (autores ?curr-gen))))
	(printout t "..." crlf))

(defrule procesado-datos::valorar-libros-dificultad-dificil "Se puntuan los libros con dificultad dificil segun perfil lector"
	?cont <- (object (is-a Libro) (Dificultad ?dificultad))
	(test (eq ?dificultad Dificil))
	?frec <- (datos_perfil_lector (frecuencia ?curr-frec))
	(test (or (eq ?curr-frec 1) (eq ?curr-frec 2)))
	?rec <- (object (is-a Recomendacion) (nombre_libro_recomendado ?conta) (puntuacion ?p) (justificaciones $?just))
	(test (eq (instance-name ?cont) (instance-name ?conta)))
	(not (valorado-libros-dificultad ?cont))
	=>
	(bind ?p (+ ?p 50))
	(bind ?text "Esta acostumbrado a leer, por lo que los libros dificiles no son un problema -> +50")
	(bind $?just (insert$ $?just (+ (length$ $?just) 1) ?text))
	(send ?rec put-puntuacion ?p)
	(send ?rec put-justificaciones $?just)
	(assert (valorado-libros-dificultad ?cont))
	(printout t "Comprobando perfil lector..." crlf))
	
(defrule procesado-datos::valorar-libros-dificultad-facil "Se puntuan los libros con dificultad facil segun perfil lector"
	?cont <- (object (is-a Libro) (Dificultad ?dificultad))
	(test (eq ?dificultad Facil))
	?frec <- (datos_perfil_lector (frecuencia ?curr-frec))
	(test (or (eq ?curr-frec 3) (eq ?curr-frec 4)))
	?rec <- (object (is-a Recomendacion) (nombre_libro_recomendado ?conta) (puntuacion ?p) (justificaciones $?just))
	(test (eq (instance-name ?cont) (instance-name ?conta)))
	(not (valorado-libros-dificultad ?cont))
	=>
	(bind ?p (+ ?p 50))
	(bind ?text "No esta acostumbrado a leer, por lo que los libros faciles son una mejor opcion -> +50")
	(bind $?just (insert$ $?just (+ (length$ $?just) 1) ?text))
	(send ?rec put-puntuacion ?p)
	(send ?rec put-justificaciones $?just)
	(assert (valorado-libros-dificultad ?cont))
	(printout t "Comprobando perfil lector..." crlf))

(defrule procesado-datos::valorar-libros-longitud-larga "Se puntuan los libros con longitud alta segun perfil lector"
	?cont <- (object (is-a Libro) (Longitud ?longitud))
	(test (eq ?longitud Largo))
	?lug <- (datos_perfil_lector (lugar ?curr-lug))
	(test (or (eq ?curr-lug 1) (eq ?curr-lug 2)))
	?rec <- (object (is-a Recomendacion) (nombre_libro_recomendado ?conta) (puntuacion ?p) (justificaciones $?just))
	(test (eq (instance-name ?cont) (instance-name ?conta)))
	(not (valorado-libros-longitud ?cont))
	=>
	(bind ?p (+ ?p 50))
	(bind ?text "Se encuentra en un lugar comodo para leer libros largos -> +50")
	(bind $?just (insert$ $?just (+ (length$ $?just) 1) ?text))
	(send ?rec put-puntuacion ?p)
	(send ?rec put-justificaciones $?just)
	(assert (valorado-libros-longitud ?cont))
	(printout t "Comprobando perfil lector..." crlf))
	
(defrule procesado-datos::valorar-libros-longitud-corta "Se puntuan los libros con longitud corta segun perfil lector"
	?cont <- (object (is-a Libro) (Longitud ?longitud))
	(test (eq ?longitud Corto))
	?lug <- (datos_perfil_lector (lugar ?curr-lug))
	(test (or (eq ?curr-lug 3) (eq ?curr-lug 4)))
	?rec <- (object (is-a Recomendacion) (nombre_libro_recomendado ?conta) (puntuacion ?p) (justificaciones $?just))
	(test (eq (instance-name ?cont) (instance-name ?conta)))
	(not (valorado-libros-longitud ?cont))
	=>
	(bind ?p (+ ?p 50))
	(bind ?text "Se encuentra en un lugar incomodo para leer libros largos. Mejor leer libros cortos -> +50")
	(bind $?just (insert$ $?just (+ (length$ $?just) 1) ?text))
	(send ?rec put-puntuacion ?p)
	(send ?rec put-justificaciones $?just)
	(assert (valorado-libros-longitud ?cont))
	(printout t "Comprobando perfil lector..." crlf))

(defrule procesado-datos::valorar-libros-bestseller "Se puntuan los libros populares segun perfil lector"
	?cont <- (object (is-a Libro) (Bestseller ?bestseller))
	(test (eq ?bestseller TRUE))
	?best <- (datos_perfil_lector (bestseller ?curr-best))
	(test (eq ?curr-best 1))
	?rec <- (object (is-a Recomendacion) (nombre_libro_recomendado ?conta) (puntuacion ?p) (justificaciones $?just))
	(test (eq (instance-name ?cont) (instance-name ?conta)))
	(not (valorado-libros-bestseller ?cont))
	=>
	(bind ?p (+ ?p 50))
	(bind ?text "Se deja llevar por libros populares -> +50")
	(bind $?just (insert$ $?just (+ (length$ $?just) 1) ?text))
	(send ?rec put-puntuacion ?p)
	(send ?rec put-justificaciones $?just)
	(assert (valorado-libros-bestseller ?cont))
	(printout t "Comprobando perfil lector..." crlf))
	
(defrule procesado-datos::valorar-libros-valoraciones "Se puntuan los libros con buenas valoraciones segun perfil lector"
	?cont <- (object (is-a Libro) (Valoracion ?valoracion))
	(test (eq ?valoracion Buena))
	?val <- (datos_perfil_lector (valoracion ?curr-val))
	(test (eq ?curr-val 1))
	?rec <- (object (is-a Recomendacion) (nombre_libro_recomendado ?conta) (puntuacion ?p) (justificaciones $?just))
	(test (eq (instance-name ?cont) (instance-name ?conta)))
	(not (valorado-libros-valoraciones ?cont))
	=>
	(bind ?p (+ ?p 50))
	(bind ?text "Se deja llevar por las valoraciones -> +50")
	(bind $?just (insert$ $?just (+ (length$ $?just) 1) ?text))
	(send ?rec put-puntuacion ?p)
	(send ?rec put-justificaciones $?just)
	(assert (valorado-libros-valoraciones ?cont))
	(printout t "Comprobando perfil lector..." crlf))
	
(defrule procesado-datos::valorar-autor-extranjero "Se puntuan los libros de autores extranjeros segun perfil lector"
	?aut <- (object (is-a Autor) (Nacionalidad ?nacionalidad))
	?cont <- (object (is-a Libro) (Escrito_por ?escrito))
	(test (eq (instance-name ?aut) (instance-name ?escrito)))
	?val <- (datos_perfil_lector (nacionalidad ?curr-nac))
	(test (neq (str-compare ?nacionalidad ?curr-nac) 0))
	?rec <- (object (is-a Recomendacion) (nombre_libro_recomendado ?conta) (puntuacion ?p) (justificaciones $?just))
	(test (eq (instance-name ?cont) (instance-name ?conta)))
	(not (valorado-libros-autor-extranjero ?cont))
	=>
	(bind ?p (+ ?p 50))
	(bind ?text "Prefiere autores extranjeros -> +50")
	(bind $?just (insert$ $?just (+ (length$ $?just) 1) ?text))
	(send ?rec put-puntuacion ?p)
	(send ?rec put-justificaciones $?just)
	(assert (valorado-libros-autor-extranjero ?cont))
	(printout t "Comprobando perfil lector..." crlf))

(defrule procesado-datos::valorar-generos-preferidos "Se puntuan los libros de los generos preferidos del lector"
	?hecho <- (generos ?gen)
	?cont <- (object (is-a Libro) (Es_genero ?genero))
	(test (eq (instance-name ?gen) ?genero))
	?rec <- (object (is-a Recomendacion) (nombre_libro_recomendado ?conta) (puntuacion ?p) (justificaciones $?just))
	(test (eq (instance-name ?cont) (instance-name ?conta)))
	(not (valorado-genero-preferido ?cont ?gen))
	=>
	(bind ?p (+ ?p 50))
	(bind ?text (str-cat "Pertenece al genero preferido: " (send ?gen get-NombreGenero) " -> +50"))
	(bind $?just (insert$ $?just (+ (length$ $?just) 1) ?text))
	(send ?rec put-puntuacion ?p)
	(send ?rec put-justificaciones $?just)
	(assert (valorado-genero-preferido ?cont ?gen))
	(printout t "Comprobando generos preferidos..." crlf))

(defrule procesado-datos::valorar-autores-preferidos "Se puntuan los libros de los autores preferidos del lector"
	?hecho <- (autores ?auto)
	?cont <- (object (is-a Libro) (Escrito_por ?autor))
	(test (eq (instance-name ?auto) ?autor))
	?rec <- (object (is-a Recomendacion) (nombre_libro_recomendado ?conta) (puntuacion ?p) (justificaciones $?just))
	(test (eq (instance-name ?cont) (instance-name ?conta)))
	(not (valorado-autor-preferido ?cont ?auto))
	=>
	(bind ?p (+ ?p 50))
	(bind ?text (str-cat "Pertenece al autor preferido: " (send ?auto get-NombreAutor) " -> +50"))
	(bind $?just (insert$ $?just (+ (length$ $?just) 1) ?text))
	(send ?rec put-puntuacion ?p)
	(send ?rec put-justificaciones $?just)
	(assert (valorado-autor-preferido ?cont ?auto))
	(printout t "Comprobando autores preferidos..." crlf))

(defrule procesado-datos::cambiar-generacion-soluciones "Cambia al modulo de generacion de soluciones"
	(declare (salience -10))
	=>
	(printout t "Generando solucion..." crlf)
	(focus generacion-soluciones))



;;--------------------------------------------------------------------------------------------------------------------------
;; GENERACION SOLUCIONES
;;--------------------------------------------------------------------------------------------------------------------------
(defrule generacion-soluciones::init-lista-recomendaciones-desordenada "Inicializa una lista de recomendaciones para ordenarlas"
	(not (lista_recomendaciones_desordenada))
	=>
	(assert (lista_recomendaciones_desordenada)))

(defrule generacion-soluciones::anyadir-recomendacion "Anyade una recomendacion a la lista de recomendaciones"
	(declare (salience 10))
	?rec <- (object (is-a Recomendacion))
	?hecho <- (lista_recomendaciones_desordenada (recomendaciones $?lista))
	(test (not (member$ ?rec $?lista)))
	=>
	(bind $?lista (insert$ $?lista (+ (length$ $?lista) 1) ?rec))
	(modify ?hecho (recomendaciones $?lista)))
	
(defrule generacion-soluciones::init-lista-recomendaciones-ordenada-por-bestseller "Inicializa una lista ordenada de recomendaciones por bestseller"
	(not (lista_recomendaciones_ordenada_por_bestseller))
	(lista_recomendaciones_desordenada (recomendaciones $?lista))
	=>
	(bind $?resultado (create$ ))
	(while (not (eq (length$ $?lista) 0)) do
		(bind ?curr-rec (ordenacion-bestseller $?lista))
		(bind $?lista (delete-member$ $?lista ?curr-rec))
		(bind $?resultado (insert$ $?resultado (+ (length$ $?resultado) 1) ?curr-rec)))
	(assert (lista_recomendaciones_ordenada_por_bestseller (recomendaciones $?resultado)))
	(printout t "Ordenando libros..." crlf))
	
(defrule generacion-soluciones::init-lista-recomendaciones-ordenada-por-puntuacion "Inicializa una lista ordenada de recomendaciones por puntuacion"
	(not (lista_recomendaciones_ordenada_por_puntuacion))
	(lista_recomendaciones_ordenada_por_bestseller (recomendaciones $?lista))
	;(lista_recomendaciones_desordenada (recomendaciones $?lista))
	=>
	(bind $?resultado (create$ ))
	(while (not (eq (length$ $?lista) 0)) do
		(bind ?curr-rec (maxima-puntuacion $?lista))
		(bind $?lista (delete-member$ $?lista ?curr-rec))
		(bind $?resultado (insert$ $?resultado (+ (length$ $?resultado) 1) ?curr-rec)))
	(assert (lista_recomendaciones_ordenada_por_puntuacion (recomendaciones $?resultado)))
	(printout t "Ordenando libros..." crlf))

(defrule generacion-soluciones::cambiar-presentar-resultados "Cambia el modulo a presentar resultados"
	(declare (salience -10))
	=>
	(printout t "Presentando respuesta..." crlf)
	(focus presentar-resultados))
	

;;--------------------------------------------------------------------------------------------------------------------------
;; PRESENTAR RESULTADOS
;;--------------------------------------------------------------------------------------------------------------------------
(defrule presentar-resultados::mostrar-resultados "Muestra los libros obtenidos"
	(lista_recomendaciones_ordenada_por_puntuacion (recomendaciones $?lista))
	(not (final))
	=>
	(printout t crlf)
	(format t "Esta es nuestra recomendacion de libros:")
	(printout t crlf)
	(format t "%n")
	(printout t crlf)
	(printout t "===============================" crlf)	
	(bind ?i 0)
	(progn$ (?curr-rec $?lista)
		(bind ?i (+ ?i 1))
		(format t "Libro %d" ?i)
		(printout t crlf)
		(printout t (send ?curr-rec mostrar-recomendacion))
		(if (eq ?i 3)
			then (break)))
	(assert (final)))